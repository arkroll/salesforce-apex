trigger RouteLeads on Lead (After update) {

    Map<ID, Integer> leadChange = new Map<ID, Integer>();

    Map<ID, Set<Lead>> routerQueue = new Map<ID, Set<Lead>>();

    Set<Lead> assignQueue = new Set<Lead>();

    for (Lead lead : Trigger.new) {
        
        System.debug('first FOR');
        
        String newOwnerId = lead.OwnerId;
    
        String oldOwnerId = Trigger.oldMap.get(lead.Id).OwnerId;
        
        if(LeadUtil.getRTR(lead) && LeadUtil.isInQueue(lead) && LeadAssignUtil.firstTime == True){
            User rep = [SELECT Id FROM User WHERE Id = :lead.repGrp__c];
            if(LeadUtil.routeBy(lead) == 'rand'){
                MapUtil.mapUpdate(routerQueue, rep.Id, lead, 'add');
            }
            else if(LeadUtil.routeBy(lead) == 'rules'){
                assignQueue.add(lead);
            }
            else if(LeadUtil.routeBy(lead) == 'campaign_owner'){
                LeadUtil.changeOwner(lead, LeadUtil.campaignOwner(lead));
            }
            MapUtil.mapUpdate(leadChange, rep.Id, 1, '$inc');
        }
        else if((LeadUtil.mvRepToRep(oldOwnerId, newOwnerId) || Lead.Util.mvToQueue(oldOwnerId, newOwnerId || Lead.ISConverted) && LeadAssignUtil.firstTime == True){
            MapUtil.mapUpdate(leadChange, Trigger.oldMap.get(lead.Id).OwnerId, -1, '$inc');
        }
        else{
            System.debug(lead.Name + 'does not qualify');
        }
    }

    if (leadChange.keySet().isEmpty() == false){ 
        
        for (ID idVal : leadChange.keySet()) {
            MapUtil.mapUpdate(routerQueue, idVal, OwnerUtil.getLeads(leadChange, idVal)), 'add');
        }
    
        LeadUtil.changeOwner(routerQueue);
        LeadUtil.runRules(assignQueue);

        LeadAssignUtil.firstTime = false;
            
        Database.Update(newLeads);

        }
    }
        
}